def infix_to_postfix(expression):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}  # Operator precedence
    stack = []  # Stack for operators
    output = []  # List for output (postfix expression)

    for char in expression:
        if char.isalnum():  # Operand (A-Z, a-z, 0-9)
            output.append(char)
        elif char in precedence:  # Operator (+, -, *, /, ^)
            while stack and stack[-1] != '(' and precedence[stack[-1]] >= precedence[char]:
                output.append(stack.pop())
            stack.append(char)
        elif char == '(':  # Left parenthesis
            stack.append(char)
        elif char == ')':  # Right parenthesis
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()  # Pop '(' from stack

    while stack:  # Pop any remaining operators
        output.append(stack.pop())

    return ''.join(output)  # Convert list to string

# Example Usage:
infix_expr = "A+B*(C^D-E)"  # Infix expression
postfix_expr = infix_to_postfix(infix_expr)  # Convert to postfix
print(postfix_expr)  # Output: ABCD^E-*+